#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Mar 22, 2020 05:13:43 PM CST  platform: Windows NT


import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
from tkinter import messagebox
import unknown_support

from douban_record_class import *
from douban_list_filter_class import *
from get_table_on_douban import *
from pop_win_class import *
import webbrowser


"""BAD_AUTHOR_LIST = ['不够格','宝贝呀','红色体恤','龙小贱','DK生活', '🌴张先生🌞🌞'];
BAD_WORD_LIST = ['阿里','彭埠','滨康','江陵','滨江','单身',"萧山","江干","临平","青年","大悦","钱江","合租","主卧","仅限"];







def get_three_kind_records(record_list_in):
    dbf = DoubanFilter(BAD_AUTHOR_LIST,BAD_WORD_LIST);
    suspend_bad_author = dbf.auto_detect_bad_author(record_list_in,dbf.BY_MIX);
    dbf.set_bad_author_list(suspend_bad_author);
    #dbf.set_good_word_list(["阿里","江干"]);
    filtered_list = dbf.filter_by_author_and_word(record_list_in,False,False);
    return filtered_list;"""





def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    unknown_support.set_Tk_var()
    top = Toplevel1 (root)
    top.update_show_list();

       # top.Scrolledlistbox1.insert(i,record_list[i].get_topic_title());
    unknown_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    unknown_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1():
    dbf = None;

    __suspend_author_list = [];
    __temp_show_list = [];

    def get_last_setting(self,set_file = 'setting.set'):
        try:
            setting_file = open(set_file,'rb');
        except:
            shoeinfo('ERROR',"ERROR IN FILE OPEN !");
            return[];
        else:
            settings = setting_file.read()
            strs_settings = settings.decode('utf-8')
            setting_file.close()  
                     
            settings_list  =  strs_settings.splitlines();
            
        return settings_list;

    def save_last_setting(self,set_file = 'setting.set'):
        _douban_id_str = self.douban_id_input.get();
        _stop_time = self.stop_time.get();
        _max_pages = self.max_pages.get();
        _is_till_last_time = str(int(self.__is_till_last_time.get()));
        _is_max_pages_lim = str(int(self.__is_max_pages_lim.get()));
        _max_topic = self.ety_max_topic.get();
        _max_resp_num = self.ety_max_response.get();
        _is_by_topic_num = str(int(self.__is_by_topic_num.get()));
        _is_by_response_num = str(int(self.__is_by_response_num.get()));

        settings_list = [_douban_id_str,_stop_time,_max_pages,\
                         _is_till_last_time,_is_max_pages_lim,\
                         _max_topic,_max_resp_num,_is_by_topic_num,_is_by_response_num]

        try:
            setting_file = open(set_file,'wb');
        except:
            shoeinfo('ERROR',"ERROR IN FILE OPEN !");
            return[];
        else:
            for item in settings_list:
                strs = item + '\n';
                setting_file.write(strs.encode('utf-8'));
            setting_file.close()  
            








    def update_show_list(self):
        #清空列表
        items = self.record_list_filt.get_children()
        [self.record_list_filt.delete(item) for item in items]

        items = self.record_list_bad_author.get_children()
        [self.record_list_bad_author.delete(item) for item in items]

        items = self.record_list_bad_word.get_children()
        [self.record_list_bad_word.delete(item) for item in items]

        items = self.record_list_readed.get_children()
        [self.record_list_readed.delete(item) for item in items]

        #print(self.record_list);

        show_list = self.dbf.filter_by_author_and_word(self.record_list,True,True, self.__suspend_author_list);
    
        for i in range(0,len(show_list)-1):
            topic_title = show_list[i].get_topic_title();
            author_name = show_list[i].get_author_name();
            resp_num = show_list[i].get_response_num();
            time = show_list[i].get_time();
            topic_link = show_list[i].get_topic_link();
            auhtor_link = show_list[i].get_author_link();
            is_bad_author = show_list[i].get_is_bad_author();
            has_bad_word = show_list[i].get_has_bad_word();
            has_readed = show_list[i].get_has_readed();

            if not is_bad_author and not has_bad_word and not has_readed:
                self.record_list_filt.insert("",i,text="" ,values=(topic_title,author_name,resp_num,time,topic_link,auhtor_link),tags=str(i)) #插入数据，
            elif is_bad_author:
                self.record_list_bad_author.insert("",i,text="" ,values=(topic_title,author_name,resp_num,time,topic_link,auhtor_link),tags=str(i)) #插入数据，
            else:
                if has_bad_word:
                    self.record_list_bad_word.insert("",i,text="" ,values=(topic_title,author_name,resp_num,time,topic_link,auhtor_link),tags=str(i)) #插入数据，
                if has_readed:
                    self.record_list_readed.insert("",i,text="" ,values=(topic_title,author_name,resp_num,time,topic_link,auhtor_link),tags=str(i)) #插入数据，

    def on_button_get_on_douban(self):
        _douban_id_str = self.douban_id_input.get();
        _douban_id_list = _douban_id_str.split(',');
        _stop_time = self.stop_time.get();
        _max_pages = int(self.max_pages.get());

        if self.__is_till_last_time.get():
            _stop_time = self.record_list[0].get_time();
        if self.__is_max_pages_lim.get():
            method = BY_MIX;
        else:
            method = BY_TIME;


        old_fresh_douban_list = [];
        for _douban_id in _douban_id_list:

            fresh_douban_list = get_table_on_douban(group_id = _douban_id, \
                                                    page_get = _max_pages, \
                                                    stop_time = _stop_time,  \
                                                    grab_end_condition =method);

            old_fresh_douban_list = self.dbf.merge_fresh_list_in_diff_topic(fresh_douban_list,old_fresh_douban_list);

            
        self.record_list = self.dbf.merge_lists(old_fresh_douban_list,self.record_list);
        #print(fresh_douban_list);
        #self.__temp_show_list = self.dbf.filter_by_author_and_word(self.record_list,True,True, self.__suspend_author_list);

        self.update_show_list();

        showinfo("info","完成抓取！");





    def on_button_save_exit(self):
        if messagebox.askokcancel("Quit", "确定要退出？"):

            self.save_last_setting()
            
            self.dbf.set_bad_author_list(self.__suspend_author_list);
            write_filter_list_to_file(self.dbf.get_bad_author_list(),\
                                      self.dbf.get_good_author_list(),\
                                      self.dbf.get_bad_word_list(), \
                                      self.dbf.get_good_word_list());
            if messagebox.askokcancel("中介及垃圾帖", "要保存中介和垃圾帖吗？") == False:
                record_list_non = filter(lambda x:x.get_is_bad_author()==False,self.record_list)
                list_non = list(record_list_non);

                record_list_non = filter(lambda x:x.get_has_bad_word()==False,list_non)
                list_non = list(record_list_non);
                #print("DEBUG IN on_button_save_exit %s" %list_non);
                write_history_to_file(list_non);
            else:
                write_history_to_file(self.record_list);
            root.destroy()
        else:
            pass;

    def on_button_load_in_file(self):
        _record_list = get_history_from_file();
        self.record_list = self.dbf.merge_lists(self.record_list,_record_list);
        self.update_show_list();
        pass;

    def on_button_get_filter_records(self):
        max_topic = int(self.ety_max_topic.get());
        max_resp_num = int (self.ety_max_response.get());

        if self.__is_by_topic_num.get() and self.__is_by_response_num.get():
            method = self.dbf.BY_MIX;       
        elif self.__is_by_topic_num.get():
            method = self.dbf.BY_AUTHOR_REPET;
        elif self.__is_by_response_num.get():
            method = self.dbf.BY_RESP_NUM;
        else:
            suspend_bad_author = [];
            self.update_show_list();  
            return;

        self.__suspend_author_list = self.dbf.auto_detect_bad_author(self.record_list,method,max_topic,max_resp_num);
        #print("on_button_get_filter_records DEBUG bad author num: %s" %len(self.__suspend_author_list));
        #self.__temp_show_list = self.dbf.filter_by_author_and_word(self.__temp_show_list,True,True, self.__suspend_author_list);
        #self.dbf.set_bad_author_list(suspend_bad_author);
        self.update_show_list();            
      


    def on_button_show_add_bad_author(self):
        list_win = pop_win(self,'bad_author_list');
        #self.wait_window(list_win) # 这一句很重要！！！
        pass;      

    def on_button_show_add_bad_word(self):
        list_win = pop_win(self,'bad_word_list');
        #self.wait_window(list_win) # 这一句很重要！！！
        pass;   

    def on_button_show_add_good_word(self):
        list_win = pop_win(self,'good_word_list');
        #self.wait_window(list_win) # 这一句很重要！！！
        pass;  

    def on_button_show_add_good_author(self):
        list_win = pop_win(self,'good_author_list');
        #self.wait_window(list_win) # 这一句很重要！！！
        pass; 






    def __init__(self, top=None):
        [bad_author_list,good_author_list,bad_word_list,good_word_list] =  get_filter_list_from_file();
        self.record_list = get_history_from_file();
        self.__temp_show_list = self.record_list.copy();
        self.dbf = DoubanFilter(bad_author_list,bad_word_list,good_author_list,good_word_list);

        self.__is_till_last_time = tk.BooleanVar();
        self.__is_max_pages_lim = tk.BooleanVar();
        self.__is_by_topic_num = tk.BooleanVar();
        self.__is_by_response_num = tk.BooleanVar();

        setting_list = self.get_last_setting();


        root.protocol("WM_DELETE_WINDOW", self.on_button_save_exit);

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1359x741+10+10")
        top.minsize(180, 1)
        top.maxsize(2164, 1410)
        top.resizable(1, 1)
        top.title("豆瓣小组帖子筛选器")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=[('selected', _compcolor), ('active',_ana2color)])
        self.Topics = ttk.Notebook(top)
        self.Topics.place(relx=0.01, rely=0.01, relheight=0.99, relwidth=0.64)
        self.Topics.configure(takefocus="")
        self.Topics_filt = tk.Frame(self.Topics)
        self.Topics.add(self.Topics_filt, padding=3)
        self.Topics.tab(0, text="已过滤",compound="left",underline="-1",)
        self.Topics_filt.configure(borderwidth="1")
        self.Topics_filt.configure(background="#d9d9d9")
        self.Topics_filt.configure(highlightbackground="#d9d9d9")
        self.Topics_filt.configure(highlightcolor="black")
        self.Topics_bad_author = tk.Frame(self.Topics)
        self.Topics.add(self.Topics_bad_author, padding=3)
        self.Topics.tab(1, text="中介贴",compound="left",underline="-1",)
        self.Topics_bad_author.configure(background="#d9d9d9")
        self.Topics_bad_author.configure(highlightbackground="#d9d9d9")
        self.Topics_bad_author.configure(highlightcolor="black")
        self.Topics_bad_word = tk.Frame(self.Topics)
        self.Topics.add(self.Topics_bad_word, padding=3)
        self.Topics.tab(2, text="垃圾帖",compound="none",underline="-1",)
        self.Topics_bad_word.configure(background="#d9d9d9")
        self.Topics_bad_word.configure(highlightbackground="#d9d9d9")
        self.Topics_bad_word.configure(highlightcolor="black")
        self.Topics_readed = tk.Frame(self.Topics)
        self.Topics.add(self.Topics_readed, padding=3)
        self.Topics.tab(3, text="已读",compound="none",underline="-1",)
        self.Topics_readed.configure(background="#d9d9d9")
        self.Topics_readed.configure(highlightbackground="#d9d9d9")
        self.Topics_readed.configure(highlightcolor="black")

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.record_list_filt = ScrolledTreeView(self.Topics_filt)
        self.record_list_bad_author = ScrolledTreeView(self.Topics_bad_author)
        self.record_list_bad_word = ScrolledTreeView(self.Topics_bad_word)
        self.record_list_readed = ScrolledTreeView(self.Topics_readed)

        self.set_record_list_style(self.record_list_filt);
        self.set_record_list_style(self.record_list_bad_author);
        self.set_record_list_style(self.record_list_bad_word);
        self.set_record_list_style(self.record_list_readed);


        self.grabing_setting = tk.LabelFrame(top)
        self.grabing_setting.place(relx=0.664, rely=0.055, relheight=0.235
                , relwidth=0.32)
        self.grabing_setting.configure(relief='groove')
        self.grabing_setting.configure(foreground="black")
        self.grabing_setting.configure(text='''抓取帖子设置''')
        self.grabing_setting.configure(background="#d9d9d9")

        self.douban_id_input = tk.Entry(self.grabing_setting)
        self.douban_id_input.place(relx=0.048, rely=0.195, height=24
                , relwidth=0.469, bordermode='ignore')
        self.douban_id_input.configure(background="white")
        self.douban_id_input.configure(disabledforeground="#a3a3a3")
        self.douban_id_input.configure(font="TkFixedFont")
        self.douban_id_input.configure(foreground="#000000")
        self.douban_id_input.configure(insertbackground="black")
        self.douban_id_input.insert(0, setting_list[0])

        self.Label1 = tk.Label(self.grabing_setting)
        self.Label1.place(relx=0.575, rely=0.172, height=31, width=160
                , bordermode='ignore')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''输入豆瓣小组id''')

        self.stop_time = tk.Entry(self.grabing_setting)
        self.stop_time.place(relx=0.048, rely=0.351, height=24, relwidth=0.469
                , bordermode='ignore')
        self.stop_time.configure(background="white")
        self.stop_time.configure(disabledforeground="#a3a3a3")
        self.stop_time.configure(font="TkFixedFont")
        self.stop_time.configure(foreground="#000000")
        self.stop_time.configure(insertbackground="black")
        self.stop_time.insert(0, setting_list[1])

        self.Label2 = tk.Label(self.grabing_setting)
        self.Label2.place(relx=0.575, rely=0.345, height=31, width=160
                , bordermode='ignore')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''输入截止时间''')

        self.max_pages = tk.Entry(self.grabing_setting)
        self.max_pages.place(relx=0.048, rely=0.506, height=24, relwidth=0.469
                , bordermode='ignore')
        self.max_pages.configure(background="white")
        self.max_pages.configure(disabledforeground="#a3a3a3")
        self.max_pages.configure(font="TkFixedFont")
        self.max_pages.configure(foreground="#000000")
        self.max_pages.configure(insertbackground="black")
        self.max_pages.insert(0, setting_list[2])

        self.Label3 = tk.Label(self.grabing_setting)
        self.Label3.place(relx=0.584, rely=0.506, height=31, width=160
                , bordermode='ignore')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''输入最大抓取页数''')

        self.isTillLastTime = tk.Checkbutton(self.grabing_setting)
        self.isTillLastTime.place(relx=0.048, rely=0.701, relheight=0.138
                , relwidth=0.361, bordermode='ignore')
        self.isTillLastTime.configure(activebackground="#ececec")
        self.isTillLastTime.configure(activeforeground="#000000")
        self.isTillLastTime.configure(background="#d9d9d9")
        self.isTillLastTime.configure(disabledforeground="#a3a3a3")
        self.isTillLastTime.configure(foreground="#000000")
        self.isTillLastTime.configure(highlightbackground="#d9d9d9")
        self.isTillLastTime.configure(highlightcolor="black")
        self.isTillLastTime.configure(justify='left')
        self.isTillLastTime.configure(text='''抓取至上次时间''')
        self.isTillLastTime.configure(variable = self.__is_till_last_time)
        if int(setting_list[3]) == 1:
            self.isTillLastTime.select();
        else:
            pass


        self.isMaxPageLim = tk.Checkbutton(self.grabing_setting)
        self.isMaxPageLim.place(relx=0.487, rely=0.701, relheight=0.138
                , relwidth=0.428, bordermode='ignore')
        self.isMaxPageLim.configure(activebackground="#ececec")
        self.isMaxPageLim.configure(activeforeground="#000000")
        self.isMaxPageLim.configure(background="#d9d9d9")
        self.isMaxPageLim.configure(disabledforeground="#a3a3a3")
        self.isMaxPageLim.configure(foreground="#000000")
        self.isMaxPageLim.configure(highlightbackground="#d9d9d9")
        self.isMaxPageLim.configure(highlightcolor="black")
        self.isMaxPageLim.configure(justify='left')
        self.isMaxPageLim.configure(text='''限制最大抓取页数''')
        self.isMaxPageLim.configure(variable = self.__is_max_pages_lim)
        if int(setting_list[4]) == 1:
            self.isMaxPageLim.select();

        self.filter_setting = tk.LabelFrame(top)
        self.filter_setting.place(relx=0.662, rely=0.31, relheight=0.34
                , relwidth=0.32)
        self.filter_setting.configure(relief='groove')
        self.filter_setting.configure(foreground="black")
        self.filter_setting.configure(text='''帖子过滤设置''')
        self.filter_setting.configure(background="#d9d9d9")
        self.filter_setting.configure(cursor="fleur")

        self.show_add_bad_author = tk.Button(self.filter_setting,command = self.on_button_show_add_bad_author)
        self.show_add_bad_author.place(relx=0.023, rely=0.238, height=30
                , width=193, bordermode='ignore')
        self.show_add_bad_author.configure(activebackground="#ececec")
        self.show_add_bad_author.configure(activeforeground="#000000")
        self.show_add_bad_author.configure(background="#d9d9d9")
        self.show_add_bad_author.configure(disabledforeground="#a3a3a3")
        self.show_add_bad_author.configure(foreground="#000000")
        self.show_add_bad_author.configure(highlightbackground="#d9d9d9")
        self.show_add_bad_author.configure(highlightcolor="black")
        self.show_add_bad_author.configure(pady="0")
        self.show_add_bad_author.configure(text='''显示或添加作者黑名单''')

        self.show_add_bad_word = tk.Button(self.filter_setting,command = self.on_button_show_add_bad_word)
        self.show_add_bad_word.place(relx=0.023, rely=0.476, height=30, width=193
                , bordermode='ignore')
        self.show_add_bad_word.configure(activebackground="#ececec")
        self.show_add_bad_word.configure(activeforeground="#000000")
        self.show_add_bad_word.configure(background="#d9d9d9")
        self.show_add_bad_word.configure(disabledforeground="#a3a3a3")
        self.show_add_bad_word.configure(foreground="#000000")
        self.show_add_bad_word.configure(highlightbackground="#d9d9d9")
        self.show_add_bad_word.configure(highlightcolor="black")
        self.show_add_bad_word.configure(pady="0")
        self.show_add_bad_word.configure(text='''显示或添加过滤关键词''')

        self.show_add_good_word = tk.Button(self.filter_setting,command = self.on_button_show_add_good_word)
        self.show_add_good_word.place(relx=0.529, rely=0.476, height=30
                , width=181, bordermode='ignore')
        self.show_add_good_word.configure(activebackground="#ececec")
        self.show_add_good_word.configure(activeforeground="#000000")
        self.show_add_good_word.configure(background="#d9d9d9")
        self.show_add_good_word.configure(disabledforeground="#a3a3a3")
        self.show_add_good_word.configure(foreground="#000000")
        self.show_add_good_word.configure(highlightbackground="#d9d9d9")
        self.show_add_good_word.configure(highlightcolor="black")
        self.show_add_good_word.configure(pady="0")
        self.show_add_good_word.configure(text='''显示添加关键词白名单''')

        self.show_add_good_author = tk.Button(self.filter_setting, command = self.on_button_show_add_good_author)
        self.show_add_good_author.place(relx=0.529, rely=0.238, height=30
                , width=183, bordermode='ignore')
        self.show_add_good_author.configure(activebackground="#ececec")
        self.show_add_good_author.configure(activeforeground="#000000")
        self.show_add_good_author.configure(background="#d9d9d9")
        self.show_add_good_author.configure(disabledforeground="#a3a3a3")
        self.show_add_good_author.configure(foreground="#000000")
        self.show_add_good_author.configure(highlightbackground="#d9d9d9")
        self.show_add_good_author.configure(highlightcolor="black")
        self.show_add_good_author.configure(pady="0")
        self.show_add_good_author.configure(text='''显示或添加作者白名单''')

        self.ety_bad_author = tk.Entry(self.filter_setting)
        self.ety_bad_author.place(relx=0.023, rely=0.139, height=24
                , relwidth=0.446, bordermode='ignore')
        self.ety_bad_author.configure(background="white")
        self.ety_bad_author.configure(disabledforeground="#a3a3a3")
        self.ety_bad_author.configure(font="TkFixedFont")
        self.ety_bad_author.configure(foreground="#000000")
        self.ety_bad_author.configure(insertbackground="black")

        self.ety_good_author = tk.Entry(self.filter_setting)
        self.ety_good_author.place(relx=0.529, rely=0.119, height=24
                , relwidth=0.423, bordermode='ignore')
        self.ety_good_author.configure(background="white")
        self.ety_good_author.configure(disabledforeground="#a3a3a3")
        self.ety_good_author.configure(font="TkFixedFont")
        self.ety_good_author.configure(foreground="#000000")
        self.ety_good_author.configure(insertbackground="black")

        self.ety_bad_word = tk.Entry(self.filter_setting)
        self.ety_bad_word.place(relx=0.023, rely=0.377, height=24, relwidth=0.446
                , bordermode='ignore')
        self.ety_bad_word.configure(background="white")
        self.ety_bad_word.configure(cursor="fleur")
        self.ety_bad_word.configure(disabledforeground="#a3a3a3")
        self.ety_bad_word.configure(font="TkFixedFont")
        self.ety_bad_word.configure(foreground="#000000")
        self.ety_bad_word.configure(insertbackground="black")

        self.ety_good_word = tk.Entry(self.filter_setting)
        self.ety_good_word.place(relx=0.529, rely=0.377, height=24
                , relwidth=0.423, bordermode='ignore')
        self.ety_good_word.configure(background="white")
        self.ety_good_word.configure(disabledforeground="#a3a3a3")
        self.ety_good_word.configure(font="TkFixedFont")
        self.ety_good_word.configure(foreground="#000000")
        self.ety_good_word.configure(insertbackground="black")

        self.ety_max_topic = tk.Entry(self.filter_setting)
        self.ety_max_topic.place(relx=0.299, rely=0.687, height=24
                , relwidth=0.285, bordermode='ignore')
        self.ety_max_topic.configure(background="white")
        self.ety_max_topic.configure(disabledforeground="#a3a3a3")
        self.ety_max_topic.configure(font="TkFixedFont")
        self.ety_max_topic.configure(foreground="#000000")
        self.ety_max_topic.configure(insertbackground="black")
        self.ety_max_topic.insert(0,setting_list[5]);

        self.Label4 = tk.Label(self.filter_setting)
        self.Label4.place(relx=0.023, rely=0.687, height=26, width=106
                , bordermode='ignore')
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''最大发帖数''')

        self.isByTopicNum = tk.Checkbutton(self.filter_setting)
        self.isByTopicNum.place(relx=0.598, rely=0.687, relheight=0.087
                , relwidth=0.361, bordermode='ignore')
        self.isByTopicNum.configure(activebackground="#ececec")
        self.isByTopicNum.configure(activeforeground="#000000")
        self.isByTopicNum.configure(background="#d9d9d9")
        self.isByTopicNum.configure(disabledforeground="#a3a3a3")
        self.isByTopicNum.configure(foreground="#000000")
        self.isByTopicNum.configure(highlightbackground="#d9d9d9")
        self.isByTopicNum.configure(highlightcolor="black")
        self.isByTopicNum.configure(justify='left')
        self.isByTopicNum.configure(text='''使用发帖数限制''')
        self.isByTopicNum.configure(variable=self.__is_by_topic_num)
        if int(setting_list[7]) == 1:
            self.isByTopicNum.select();

        self.ety_max_response = tk.Entry(self.filter_setting)
        self.ety_max_response.place(relx=0.299, rely=0.79, height=24
                , relwidth=0.285, bordermode='ignore')
        self.ety_max_response.configure(background="white")
        self.ety_max_response.configure(disabledforeground="#a3a3a3")
        self.ety_max_response.configure(font="TkFixedFont")
        self.ety_max_response.configure(foreground="#000000")
        self.ety_max_response.configure(insertbackground="black")
        self.ety_max_response.insert(0,setting_list[6]);

        self.Label4_1 = tk.Label(self.filter_setting)
        self.Label4_1.place(relx=0.023, rely=0.79, height=26, width=106
                , bordermode='ignore')
        self.Label4_1.configure(activebackground="#f9f9f9")
        self.Label4_1.configure(activeforeground="black")
        self.Label4_1.configure(background="#d9d9d9")
        self.Label4_1.configure(disabledforeground="#a3a3a3")
        self.Label4_1.configure(foreground="#000000")
        self.Label4_1.configure(highlightbackground="#d9d9d9")
        self.Label4_1.configure(highlightcolor="black")
        self.Label4_1.configure(text='''最大回复数''')

        self.isByResposeNum = tk.Checkbutton(self.filter_setting)
        self.isByResposeNum.place(relx=0.598, rely=0.794, relheight=0.087
                , relwidth=0.361, bordermode='ignore')
        self.isByResposeNum.configure(activebackground="#ececec")
        self.isByResposeNum.configure(activeforeground="#000000")
        self.isByResposeNum.configure(background="#d9d9d9")
        self.isByResposeNum.configure(disabledforeground="#a3a3a3")
        self.isByResposeNum.configure(foreground="#000000")
        self.isByResposeNum.configure(highlightbackground="#d9d9d9")
        self.isByResposeNum.configure(highlightcolor="black")
        self.isByResposeNum.configure(justify='left')
        self.isByResposeNum.configure(text='''使用回复数限制''')
        self.isByResposeNum.configure(variable=self.__is_by_response_num)
        if int(setting_list[8]) == 1:
            self.isByResposeNum.select();
        self.load_in_file = tk.Button(top,command = self.on_button_load_in_file)
        self.load_in_file.place(relx=0.662, rely=0.661, height=40, width=435)
        self.load_in_file.configure(activebackground="#ececec")
        self.load_in_file.configure(activeforeground="#000000")
        self.load_in_file.configure(background="#d9d9d9")
        self.load_in_file.configure(disabledforeground="#a3a3a3")
        self.load_in_file.configure(foreground="#000000")
        self.load_in_file.configure(highlightbackground="#d9d9d9")
        self.load_in_file.configure(highlightcolor="black")
        self.load_in_file.configure(pady="0")
        self.load_in_file.configure(text='''加载本地记录''')

        self.get_on_douban = tk.Button(top,command = self.on_button_get_on_douban)
        self.get_on_douban.place(relx=0.662, rely=0.729, height=40, width=435)
        self.get_on_douban.configure(activebackground="#ececec")
        self.get_on_douban.configure(activeforeground="#000000")
        self.get_on_douban.configure(background="#d9d9d9")
        self.get_on_douban.configure(disabledforeground="#a3a3a3")
        self.get_on_douban.configure(foreground="#000000")
        self.get_on_douban.configure(highlightbackground="#d9d9d9")
        self.get_on_douban.configure(highlightcolor="black")
        self.get_on_douban.configure(pady="0")
        self.get_on_douban.configure(text='''抓取并筛选帖子''')

        self.filter_records = tk.Button(top,command = self.on_button_get_filter_records)
        self.filter_records.place(relx=0.662, rely=0.796, height=40, width=435)
        self.filter_records.configure(activebackground="#ececec")
        self.filter_records.configure(activeforeground="#000000")
        self.filter_records.configure(background="#d9d9d9")
        self.filter_records.configure(disabledforeground="#a3a3a3")
        self.filter_records.configure(foreground="#000000")
        self.filter_records.configure(highlightbackground="#d9d9d9")
        self.filter_records.configure(highlightcolor="black")
        self.filter_records.configure(pady="0")
        self.filter_records.configure(text='''重新筛选帖子''')

        self.save_exit = tk.Button(top,command = self.on_button_save_exit)
        self.save_exit.place(relx=0.662, rely=0.864, height=40, width=437)
        self.save_exit.configure(activebackground="#ececec")
        self.save_exit.configure(activeforeground="#000000")
        self.save_exit.configure(background="#ab3048")
        self.save_exit.configure(disabledforeground="#a3a3a3")
        self.save_exit.configure(foreground="#ffffff")
        self.save_exit.configure(highlightbackground="#d9d9d9")
        self.save_exit.configure(highlightcolor="black")
        self.save_exit.configure(pady="0")
        self.save_exit.configure(text='''保存并退出''')


        










    
    def right_sel_pop(self,event, *args, **kwargs):
        right_sel_menu = tk.Menu(self.record_list_filt,tearoff = 0);
        right_sel_menu.add_command(label= "作者加入黑名单",command=self.add_bad_author);
        right_sel_menu.add_separator()
        right_sel_menu.add_command(label= "标记为已读",command=None);
        right_sel_menu.post(event.x_root, event.y_root);

        

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.configure(activeborderwidth="1")
        Popupmenu1.configure(activeforeground="black")
        Popupmenu1.configure(background="#d9d9d9")
        Popupmenu1.configure(borderwidth="1")
        Popupmenu1.configure(disabledforeground="#a3a3a3")
        Popupmenu1.configure(font="-family {Microsoft YaHei UI} -size 9")
        Popupmenu1.configure(foreground="black")
        Popupmenu1.configure(tearoff="0")
        Popupmenu1.post(event.x_root, event.y_root)

    @staticmethod
    def popup2(event, *args, **kwargs):
        Popupmenu2 = tk.Menu(root, tearoff=0)
        Popupmenu2.configure(activebackground="#f9f9f9")
        Popupmenu2.configure(activeborderwidth="1")
        Popupmenu2.configure(activeforeground="black")
        Popupmenu2.configure(background="#d9d9d9")
        Popupmenu2.configure(borderwidth="1")
        Popupmenu2.configure(disabledforeground="#a3a3a3")
        Popupmenu2.configure(font="-family {Microsoft YaHei UI} -size 9")
        Popupmenu2.configure(foreground="black")
        Popupmenu2.post(event.x_root, event.y_root)




    def set_record_list_style(self,record_list):
        record_list.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        record_list.configure(columns="topic author response time topic_link author_link")
        record_list.configure(displaycolumns = "topic author response time");

        # build_treeview_support starting.
        record_list.heading("#0",text="Tree")
        record_list.heading("#0",anchor="center")
        record_list.column("#0",width="0")
        record_list.column("#0",minwidth="0")
        record_list.column("#0",stretch="0")
        record_list.column("#0",anchor="w")
        record_list.heading("topic",anchor="center")
        record_list.column("topic",width="400")
        record_list.column("topic",minwidth="400")
        record_list.column("topic",stretch="0")
        record_list.column("topic",anchor="w")
        record_list.heading("author",anchor="center")
        record_list.column("author",width="100")
        record_list.column("author",minwidth="100")
        record_list.column("author",stretch="1")
        record_list.column("author",anchor="w")
        record_list.heading("response",anchor="center")
        record_list.column("response",width="100")
        record_list.column("response",minwidth="100")
        record_list.column("response",stretch="1")
        record_list.column("response",anchor="w")
        record_list.heading("time",anchor="center")
        record_list.column("time",width="100")
        record_list.column("time",minwidth="100")
        record_list.column("time",stretch="1")
        record_list.column("time",anchor="w")
        record_list.heading("topic_link",anchor="center")
        record_list.column("topic_link",width="100")
        record_list.column("topic_link",minwidth="100")
        record_list.column("topic_link",stretch="1")
        record_list.column("topic_link",anchor="w")
        record_list.heading("author_link",anchor="center")
        record_list.column("author_link",width="100")
        record_list.column("author_link",minwidth="100")
        record_list.column("author_link",stretch="1")
        record_list.column("author_link",anchor="w")

        record_list.heading("topic",text="帖子")  #显示表头
        record_list.heading("author",text="作者")
        record_list.heading("response",text="回复")
        record_list.heading("time",text="时间")


        def treeview_sort_column(tv, col, reverse):#Treeview、列名、排列方式
            l = [(tv.set(k, col), k) for k in tv.get_children('')]
            #print(tv.get_children(''))
            l.sort(reverse=reverse)#排序方式
            # rearrange items in sorted positions
            for index, (val, k) in enumerate(l):#根据排序后索引移动
                tv.move(k, '', index)
                #print(k)
            tv.heading(col, command=lambda: treeview_sort_column(tv, col, not reverse))#重写标题，使之成为再点倒序的标题

        columns = ("topic","author","response","time","topic_link","author_link");

        for col in columns:#给所有标题加（循环上边的“手工”）
            record_list.heading(col, text=col, command=lambda _col=col: treeview_sort_column(record_list, _col, False))



        def on_right_click(event, *args, **kwargs):
            right_sel_menu = tk.Menu(record_list,tearoff = 0);
            right_sel_menu.add_command(label= "这人是中介",command=add_bad_author);
            right_sel_menu.add_separator()
            right_sel_menu.add_command(label= "这人不是中介",command=remove_bad_author);
            right_sel_menu.add_separator()
            right_sel_menu.add_command(label= "标记为已读",command=marked_as_readed);

            right_sel_menu.post(event.x_root, event.y_root);


        def remove_bad_author():
            for item in record_list.selection():
                item_text = record_list.item(item,"values")
                #webbrowser.open(item_text[4])
                messege = "确定要将\"{}\"移除中介名单？".format(item_text[1]);
                if messagebox.askokcancel("移除中介", messege):
                    self.dbf.set_good_author_list([item_text[1]]);
                    self.dbf.remove_some_bad_authors([item_text[1]]);
                #print(item_text[1])#输出所选行的第一列的值
                self.update_show_list();            
            pass;

        def on_double_Click(event):#单击
            for item in record_list.selection():
                item_text = record_list.item(item,"values")

                #record_list.item(item,foreground = "red");
                webbrowser.open(item_text[4])

                for record in self.record_list:
                    if item_text[0] == record.get_topic_title():
                        record.set_has_readed(True);
                        #print("DEBUG on_double_Click: SETTED")                  
                        break;

                str0 = 'rd---'+item_text[0]+'--rd'
                changed_ = (str0,) + item_text[1:];
                cRowId = ttk.Treeview.focus(record_list);
                dicTemp = ttk.Treeview.item( record_list, cRowId )               
                ttk.Treeview.item( record_list, cRowId, values = changed_)

                #print(item_text[4])#输出所选行的第一列的值


        def add_bad_author():
            for item in record_list.selection():
                item_text = record_list.item(item,"values")
                #webbrowser.open(item_text[4])
                messege = "确定要将\"{}\"添加到中介名单？".format(item_text[1]);
                if messagebox.askokcancel("添加中介", messege):
                    self.dbf.set_bad_author_list([item_text[1]]);
                    self.dbf.remove_some_good_authors([item_text[1]])                 
                #print(item_text[1])#输出所选行的第一列的值
                self.update_show_list();
        def marked_as_readed():
            for item in record_list.selection():
                item_text = record_list.item(item,"values")

                for record in self.record_list:
                    if item_text[0] == record.get_topic_title():
                        record.set_has_readed(True);
                        #print(item_text[0])
                        break;
            self.update_show_list();
            pass

        record_list.bind("<Button-3>", on_right_click);
        record_list.bind('<Double-Button-1>', on_double_Click)









# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





